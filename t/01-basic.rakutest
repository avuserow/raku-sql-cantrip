use Test;
use DBIish;
use SQL::Cantrip;

my $db = DBIish.connect("SQLite", :database<:memory:>);
my $sql = SQL::Cantrip.new(:$db);

subtest 'select', {
    subtest 'simple', {
        is-deeply $sql.select('table', []).things, ['SELECT * FROM "table"', []];
    }

    subtest 'columns', {
        is-deeply $sql.select(:cols<a>, 'table', []).things, ['SELECT "a" FROM "table"', []];
        is-deeply $sql.select(:cols<a b>, 'table', []).things, ['SELECT "a", "b" FROM "table"', []];
    }

    subtest 'where', {
        is-deeply $sql.select(:cols<a>, 'table', [:1a]).things, ['SELECT "a" FROM "table" WHERE "a" = ?', [1]];
        is-deeply $sql.select(:cols<a b>, 'table', [:1a, :2b]).things, ['SELECT "a", "b" FROM "table" WHERE "a" = ? AND "b" = ?', [1, 2]];
    }
}

subtest 'update', {
    subtest 'simple', {
        is-deeply $sql.update('table', {:foo<bar>}, []).things, ['UPDATE "table" SET "foo" = ?', ["bar"]];
        is-deeply $sql.update('table', {:foo<bar>}, [:1a]).things, ['UPDATE "table" SET "foo" = ? WHERE "a" = ?', ["bar", 1]];
    }

    subtest 'null', {
        is-deeply $sql.update('table', {:foo<bar>, :bar(Any)}, []).things, ['UPDATE "table" SET "bar" = NULL, "foo" = ?', ["bar"]];
    }
}

subtest 'new where clause syntax', {
    subtest 'default pairs for equality', {
        is-deeply $sql.where([:1a]).things, ['WHERE "a" = ?', [1]];
        is-deeply $sql.where([:1a, :2b]).things, ['WHERE "a" = ? AND "b" = ?', [1, 2]];
        is-deeply $sql.where([:1a, :2b, :3a]).things, ['WHERE "a" = ? AND "b" = ? AND "a" = ?', [1, 2, 3]];
    }

    subtest 'specified operators', {
        is-deeply $sql.where([compare(:op('='), :cmp(:1a))]).things, ['WHERE "a" = ?', [1]];
        is-deeply $sql.where([compare(:op('>'), :cmp(:1a))]).things, ['WHERE "a" > ?', [1]];
        is-deeply $sql.where([compare(:op<LIKE>, :cmp(:a<foobar>))]).things, ['WHERE "a" LIKE ?', ['foobar']];

        is-deeply $sql.where([
            compare(:op('>'), :cmp(:1a)),
            compare(:op('<'), :cmp(:9a)),
        ]).things, ['WHERE "a" > ? AND "a" < ?', [1, 9]];
    }

    subtest 'subgroups', {
        is-deeply $sql.where([
            group(:and, [:1a, :2b]),
        ]).things, ['WHERE ("a" = ? AND "b" = ?)', [1, 2]];

        is-deeply $sql.where([
            group(:or, [:1a, :2b]),
        ]).things, ['WHERE ("a" = ? OR "b" = ?)', [1, 2]];

        is-deeply $sql.where([
            :1a,
            group(:or, [
                :2a,
                group(:and, [:2b, :3c]),
            ]),
        ]).things, ['WHERE "a" = ? AND ("a" = ? OR ("b" = ? AND "c" = ?))', [1, 2, 2, 3]];
    }
}

subtest 'where clause', {
    subtest 'simple', {
        is-deeply $sql.where([:1a]).things, ['WHERE "a" = ?', [1]];
        is-deeply $sql.where([:1a, :2b]).things, ['WHERE "a" = ? AND "b" = ?', [1, 2]];
    }

    subtest 'single group', {
        is-deeply $sql.where([group(:and, [:1a, :2b])]).things, ['WHERE ("a" = ? AND "b" = ?)', [1, 2]];
        is-deeply $sql.where([group(:or, [:1a, :2b])]).things, ['WHERE ("a" = ? OR "b" = ?)', [1, 2]];
    }

    subtest 'multiple groups', {
        is-deeply $sql.where([
            group(:or, [:1a, :2b]),
            group(:or, [:3a, :4b]),
        ]).things, ['WHERE ("a" = ? OR "b" = ?) AND ("a" = ? OR "b" = ?)', [1, 2, 3, 4]];
    }

    subtest 'custom operator', {
        is-deeply $sql.where([compare(:op('<'), :cmp(:5a))]).things, ['WHERE "a" < ?', [5]];
    }

    subtest 'null', {
        is-deeply $sql.where([:a(Any)]).things, ['WHERE "a" IS NULL', []];
        is-deeply $sql.where([:a(Any), :1b]).things, ['WHERE "a" IS NULL AND "b" = ?', [1]];
    }

    subtest 'in/not_in empty list', {
        my @empty;
        is-deeply $sql.where([compare(:op<IN>, :cmp(:foo(@empty)))]).things, ['WHERE 0=1', []];
        is-deeply $sql.where([compare(:op<NOT IN>, :cmp(:foo(@empty)))]).things, ['WHERE 1=1', []];
    }
}

subtest 'compare function', {
    subtest 'binary operators', {
        is-deeply $sql.where([compare(:op<=>, :cmp(:5a))]).things, ['WHERE "a" = ?', [5]];
        is-deeply $sql.where([compare(:op<is>, :cmp(:a(Any)))]).things, ['WHERE "a" IS NULL', []];
        is-deeply $sql.where([compare(:op<is not>, :cmp(:a(Any)))]).things, ['WHERE "a" IS NOT NULL', []];
        is-deeply $sql.where([compare(:op<IS>, :cmp(:a(Any)))]).things, ['WHERE "a" IS NULL', []];
        is-deeply $sql.where([compare(:op<IS NOT>, :cmp(:a(Any)))]).things, ['WHERE "a" IS NOT NULL', []];
    };

    subtest 'in operators', {
        is-deeply $sql.where([compare(:op<IN>, :cmp(:a[1, 2, 3, 4]))]).things, ['WHERE "a" IN (?, ?, ?, ?)', [1, 2, 3, 4]];
        is-deeply $sql.where([compare(:op<NOT IN>, :cmp(:a[1, 2, 3, 4]))]).things, ['WHERE "a" NOT IN (?, ?, ?, ?)', [1, 2, 3, 4]];
    }

    subtest 'between operators', {
        is-deeply $sql.where([compare(:op<BETWEEN>, :cmp(:a[1, 3]))]).things, ['WHERE "a" BETWEEN ? AND ?', [1, 3]];
        dies-ok {$sql.where([compare(:op<BETWEEN>, :cmp(:a[1]))])};
        dies-ok {$sql.where([compare(:op<BETWEEN>, :cmp(:a[1, 2, 3]))])};
    }
}

done-testing;
